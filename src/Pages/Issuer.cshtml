@page
@model AspNetCoreVerifiableCredentials.Pages.IssuerModel
@{
    ViewData["Title"] = "Issuer";
}
<div style="text-align: center;">
    <h2>Issue a Verifiable Credential</h2>
</div>

<hr/>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-8">
            <form>
                <div class="mb-3">
                    <label for="inputFirstName" class="form-label">First Name *</label>
                    <input type="text" class="form-control" id="inputFirstName" placeholder="Enter your first name" required="required">
                </div>
                <div class="mb-3">
                    <label for="inputLastName" class="form-label">Last Name *</label>
                    <input type="text" class="form-control" id="inputLastName" placeholder="Enter your last name" required="required">
                </div>
                <div class="mb-3">
                    <label for="credType" class="form-label">Select a Credential Type</label>
                    <select class="form-select" name="credType" id="credTypeSelect" aria-label="Default select example" asp-items="Model.CredentialTypes">
                    </select>
                    <label id="credDescription" style="font-size:0.8em;"></label>
                </div>
                <div class="mb-3 text-center">
                    <button type="button" id="sign-in" class="btn btn-primary">Step 1 - Get Credential</button>
                </div>
            </form>
        </div>
    </div>
    <div class="row justify-content-md-center">
        <div class="col col-md-auto text-center">
            <div id="qrText" style="display:none;">
                <p>
                    <img src="authenticator-icon.png" alt="Authenticator icon" style="width: 50px; padding-bottom: 5px;"><br>
                    Scan with Microsoft Authenticator
                </p>
            </div>
            <div >
                <a id="deeplink" style="display:none; margin-top:10px;">Tap to open Authenticator on mobile</a>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status" id="spinner" style="display:none;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <div class="row justify-content-md-center">
        <div class="col col-md-auto text-center" id="qrcode"></div>
    </div>
    <div class="row justify-content-md-center">
        <div id="pinCodeText" style="display:none; margin-top:10px;" class="col col-lg-8 text-center bg-info text-dark"></div>
    </div>
    <div class="row justify-content-center">
        <div class="col col-lg-8 text-center">
            <div id="message-wrapper" style="margin-bottom:50px; margin-top:50px; display: none">
                <i class="fas fa-user-check fa-5x" style="color: #228B22; margin-bottom:25px"></i>
                <div id="message"></div>
                <br />
                <div id="payload"></div>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col col-md-auto text-center">
            <button type="button" id="verify-button" class="btn btn-primary" style="display:none" onclick="verifyCredential()">
                Step 2 - Verify credential&nbsp;<i class="fas fa-arrow-circle-right" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>


<script src="js/qrcode.min.js"></script>
<script>
    var signIn = document.getElementById('sign-in');
    var verify = document.getElementById('verify-button');
    var spinner = document.getElementById('spinner');
    var credTypeSelect = document.getElementById('credTypeSelect');
    var qrcode = new QRCode("qrcode", { width: 200, height: 200 });
    var respIssuanceReq = null;
    var credType = null;
    var credDescription = null;

    function getCredentialDescriptions () {
        fetch('/api/credentialtypes')
            .then(response => response.json())
            .then(data => {
                credDescriptions = data;
                setCredentialDescription();
            }).catch(error => { console.log(error.message); })
    };

    var verifyCredential = () => {
        window.location = `verifier?credType=${credType}`;
    };
    
    var setCredentialDescription = (credType) => {
        if (credType === undefined || credType === null) {
            credType = credTypeSelect.value;
        }
        var description = credDescriptions.find((x) => x.name == credType).description;
        document.getElementById('credDescription').innerHTML = description;
    }


    getCredentialDescriptions();

    credTypeSelect.addEventListener('change', function () {
        credType = this.value;
        setCredentialDescription(credType);
    });


    signIn.addEventListener('click', () => {
        var firstName = document.getElementById('inputFirstName').value;
        var lastName = document.getElementById('inputLastName').value;
        credType = document.querySelector('select[name="credType"]').value;
        if(lastName.length == 0 || firstName.length == 0) {
            var notyf = new Notyf({
                duration: 3000,
                position: {
                    x: 'right',
                    y: 'top',
                }, 
            });
            notyf.error('Please enter your first and last name');
            return;
        }
        
        spinner.style.display = 'block';
        var url = `/api/issuer/issuance-request?credType=${credType}&firstName=${firstName}&lastName=${lastName}`;
        fetch(url)
        .then(function(response) {
            spinner.style.display='none';
            response.text()
            .catch(error => document.getElementById("message").innerHTML = error)
            .then(function(message) {
                respIssuanceReq = JSON.parse(message);
                if( /Android/i.test(navigator.userAgent) ) {
                    console.log(`Android device! Using deep link (${respIssuanceReq.url}).`);
                    window.location.href = respIssuanceReq.url; 
                    setTimeout(function () {
                        window.location.href = "https://play.google.com/store/apps/details?id=com.azure.authenticator"; }, 
                        2000
                    );
                } else if (/iPhone/i.test(navigator.userAgent)) {
                    console.log(`iOS device! Using deep link (${respIssuanceReq.url}).`);
                    window.location.replace(respIssuanceReq.url);
                } else {
                    console.log(`Not Android or IOS. Generating QR code encoded with ${message}`);
                    qrcode.makeCode(respIssuanceReq.url);
                    document.getElementById('sign-in').style.display = "none";
                    document.getElementById('qrText').style.display = "block";
                    if (respIssuanceReq.pin) {
                        document.getElementById('pinCodeText').innerHTML = `Pin code: <strong>${respIssuanceReq.pin}</strong>`;
                        document.getElementById('pinCodeText').style.display = "block";
                    }
                }
            }).catch(error => { console.log(error.message); })
        }).catch(error => { console.log(error.message); })

        var checkStatus = setInterval(function () {
            fetch('api/issuer/issuance-response?id=' + respIssuanceReq.requestId )
                .then(response => response.text())
                .catch(error => document.getElementById("message").innerHTML = error)
                .then(response => {
                    if (response.length > 0) {
                        console.log(response)
                        respMsg = JSON.parse(response);
                        // QR Code scanned, show pincode if pincode is required
                        if (respMsg.status == 'request_retrieved') {
                            document.getElementById('message-wrapper').style.display = "block";
                            document.getElementById('qrText').style.display = "none";
                            document.getElementById('qrcode').style.display = "none";

                            if (respMsg.pin) {
                                document.getElementById('pinCodeText').style.display = "visible";
                            }
                            document.getElementById('message').innerHTML = respMsg.message;
                        }
                        if (respMsg.status == 'issuance_successful') {
                            document.getElementById('pinCodeText').style.display = "none";
                            document.getElementById('message').innerHTML = respMsg.message;
                            verify.style.display = "block";
                            clearInterval(checkStatus);
                        }
                        if (respMsg.status == 'issuance_error') {
                            document.getElementById('pinCodeText').style.display = "none";
                            document.getElementById('message').innerHTML = "Issuance error occured, did you enter the wrong pincode? Please refresh the page and try again.";
                            document.getElementById('payload').innerHTML = `Payload: ${respMsg.payload}`;
                            clearInterval(checkStatus);
                        }
                    }
                })
        }, 1500); //change this to higher interval if you use ngrok to prevent overloading the free tier service
    })
</script>

